{
	"info": {
		"_postman_id": "78b6fd32-f9c8-4e39-9cb6-b2ab9a2788d4",
		"name": "visitsCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38201107"
	},
	"item": [
		{
			"name": "Create Visits",
			"item": [
				{
					"name": "Add a Pet Visit - Success Request[BUG: Missing Response Body]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The visit was sucessfully added Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response contains valid owner data\", function () {",
									"    // Check if the response body is empty",
									"    if (pm.response.to.be.json) {",
									"       ",
									"            // Try to parse the response as JSON",
									"            var jsonData = pm.response.json();",
									"",
									"            // Proceed with further checks if the body contains valid JSON",
									"            if(pm.iterationData.length>0)",
									"            {",
									"                pm.expect(jsonData).to.have.property('id');",
									"                pm.expect(jsonData.date).to.eql(pm.iterationData.get('date'));",
									"                pm.expect(jsonData.description).to.eql(pm.iterationData.get('description'));",
									"                pm.expect(jsonData.petId).to.eql(pm.iterationData.get('petId'));",
									"            }",
									"            else {",
									"            // Extract variables for comparison",
									"             var { visitDate, visitDescription, petId } = pm.variables.toObject();",
									"            pm.expect(jsonData).to.have.property('id');",
									"            pm.expect(jsonData.date).to.eql(visitDate);",
									"            pm.expect(jsonData.description).to.eql(visitDescription);",
									"            pm.expect(jsonData.petId).to.eql(petId);",
									"            }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"petId\", pm.iterationData.get('petId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"{{visitDate}}\",\n  \"description\": \"{{visitDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Pet Visit - Missing visitDescription Request [BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 400);",
									"    pm.expect(jsonData).to.have.property('error', 'Bad Request');",
									"    pm.expect(jsonData).to.have.property('message').to.contain(\"Validation failed\");",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/visits');",
									"    ",
									"    // Validate the detailed error for missing lastName",
									"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
									"    pm.expect(jsonData.errors[0]).to.have.property('field', 'description');",
									"    pm.expect(jsonData.errors[0]).to.have.property('defaultMessage', 'must not be empty');",
									"    pm.expect(jsonData.errors[0]).to.have.property('code', 'NotEmpty');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"petId\", pm.iterationData.get('petId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"{{visitDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Pet Visit - Missing Payload Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('error', 'Bad Request');",
									"    pm.expect(jsonData).to.have.property('message').to.contain(\"Required request body is missing\");",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/visits');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"petId\", pm.iterationData.get('petId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Pet Visit- Pet Not Found Request [BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner Not Found with Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 404);",
									"    pm.expect(jsonData).to.have.property('error', 'Not Found Error');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/visits/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"notFoundPetId\", pm.iterationData.get('notFoundPetId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"{{visitDate}}\",\n  \"description\": \"{{visitDescription}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{notFoundPetId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Visits",
			"item": [
				{
					"name": "Get All Visits for a Pet - Success Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the response is in JSON format",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate the status code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains valid owner data\", function () {",
									"    // Check if the response body is empty",
									"    if (pm.response.to.be.json) {",
									"       ",
									"            // Try to parse the response as JSON",
									"            var jsonData = pm.response.json();",
									"",
									"            // Proceed with further checks if the body contains valid JSON",
									"            if(pm.iterationData.length>0)",
									"            {",
									"                pm.expect(jsonData[0]).to.have.property('id');",
									"                pm.expect(jsonData[0].date).to.eql(pm.iterationData.get('date'));",
									"                pm.expect(jsonData[0].description).to.eql(pm.iterationData.get('description'));",
									"            }",
									"            else {",
									"            // Extract variables for comparison",
									"             var { visitDate, visitDescription, petId } = pm.variables.toObject();",
									"            pm.expect(jsonData[0]).to.have.property('id');",
									"            pm.expect(jsonData[0].date).to.eql(visitDate);",
									"            pm.expect(jsonData[0].description).to.eql(visitDescription);",
									"            }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"petId\", pm.iterationData.get('petId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Visits for a Pet - Pet Not Found Request [BUG: wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner Not Found with Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 404);",
									"    pm.expect(jsonData).to.have.property('error', 'Not Found Error');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/visits/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));",
									"pm.globals.set(\"notFoundPetId\", pm.iterationData.get('notFoundPetId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId",
								"visits"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{notFoundPetId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
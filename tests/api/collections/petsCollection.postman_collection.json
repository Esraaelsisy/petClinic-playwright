{
	"info": {
		"_postman_id": "89dcca92-1125-419d-ad4d-2cd13d1de40d",
		"name": "petsCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38201107"
	},
	"item": [
		{
			"name": "Add Pets",
			"item": [
				{
					"name": "Add Pets to an Owner- Success Request [BUG: Invalid Payload]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The pet was sucessfully added Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains valid owner data\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.name).to.eql(pm.iterationData.get('petName'));",
									"    pm.expect(jsonData.birthdate).to.eql(pm.iterationData.get('petBirthDate'));",
									"    pm.expect(jsonData.typeId).to.eql(pm.iterationData.get('petTypeId'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Leo\",\n  \"birthDate\": \"2010-09-07\",\n  \"type\": {\n    \"name\": \"cat\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Pets to an Owner- Success Request [Correct Payload][BUG: Wrong response code & Missing response body]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The pet was sucessfully added Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Check if response body is not empty and contains valid JSON\", function () {",
									"    // Get the response body as text",
									"    var responseBody = pm.response.text();",
									"",
									"    // Check if the response body is empty",
									"    if (responseBody && responseBody.length > 0) {",
									"        try {",
									"            // Try to parse the response as JSON",
									"            var jsonData = pm.response.json();",
									"            if(pm.iterationData.length>0)",
									"            {",
									"",
									"            // Proceed with further checks if the body contains valid JSON",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(pm.iterationData.get('petName'));",
									"        pm.expect(jsonData.birthdate).to.eql(pm.iterationData.get('petBirthDate'));",
									"        pm.expect(jsonData.typeId).to.eql(pm.iterationData.get('petTypeId'));",
									"            } ",
									"            else{",
									"                  // Extract variables for comparison",
									"        var { petName, petBirthDate, petTypeId } = pm.variables.toObject();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(petName);",
									"        pm.expect(jsonData.birthDate).to.eql(petBirthDate);",
									"        pm.expect(jsonData.type.id).to.eql(parseInt",
									"        (petTypeId));",
									"    }",
									"        } catch (e) {",
									"            // Handle invalid JSON parsing error",
									"            pm.expect.fail(\"Response body is not valid JSON\");",
									"        }",
									"    } else {",
									"        // Handle empty response body",
									"        pm.expect.fail(\"Response body is empty\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{petId}}\",\n  \"name\": \"{{petName}}\",\n  \"birthDate\": \"{{petBirthDate}}\",\n  \"typeId\": \"{{petTypeId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Pets to an Owner- Missing catName Request [BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 400);",
									"    pm.expect(jsonData).to.have.property('error', 'Bad Request');",
									"    pm.expect(jsonData).to.have.property('message').to.contain(\"Validation failed\");",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/pets');",
									"    ",
									"    // Validate the detailed error for missing lastName",
									"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
									"    pm.expect(jsonData.errors[0]).to.have.property('field', 'name');",
									"    pm.expect(jsonData.errors[0]).to.have.property('defaultMessage', 'must not be empty');",
									"    pm.expect(jsonData.errors[0]).to.have.property('code', 'NotEmpty');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{petId}}\",\n  \"birthDate\": \"{{petBirthDate}}\",\n  \"typeId\": \"{{petTypeId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Pets",
			"item": [
				{
					"name": "Get a Pet By OwnerID- Success Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate the status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains valid owner data\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(pm.iterationData.length > 0) {",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(pm.iterationData.get('petName'));",
									"        pm.expect(jsonData.birthDate).to.eql(pm.iterationData.get('petBirthDate'));",
									"        pm.expect(jsonData.type.id).to.eql(pm.iterationData.get('petTypeId'));",
									"    } else {",
									"        // Extract variables for comparison",
									"        var { petName, petBirthDate, petTypeId } = pm.variables.toObject();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(petName);",
									"        pm.expect(jsonData.birthDate).to.eql(petBirthDate);",
									"        pm.expect(jsonData.type.id).to.eql(parseInt",
									"        (petTypeId));",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Pet By OwnerID- Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 400);",
									"    pm.expect(jsonData).to.have.property('error', 'Bad Request');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/pets');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "invalid2"
								},
								{
									"key": "petId",
									"value": "sfd1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Pet By OwnerID- NotFound Request[BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner Not Found with Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 404);",
									"    pm.expect(jsonData).to.have.property('error', 'Not Found Error');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/pets/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{invalidOwnerID}}"
								},
								{
									"key": "petId",
									"value": "{{invalidPetID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Pets",
			"item": [
				{
					"name": "Update Pets to an Owner- Success Request [Correct Payload][BUG: Missing Body Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The pet was sucessfully added Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Check if response body is not empty and contains valid JSON\", function () {",
									"    // Get the response body as text",
									"    var responseBody = pm.response.text();",
									"",
									"    // Check if the response body is empty",
									"    if (responseBody && responseBody.length > 0) {",
									"        try {",
									"            // Try to parse the response as JSON",
									"            var jsonData = pm.response.json();",
									"            if(pm.iterationData.length>0)",
									"            {",
									"",
									"            // Proceed with further checks if the body contains valid JSON",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(pm.iterationData.get('petName'));",
									"        pm.expect(jsonData.birthdate).to.eql(pm.iterationData.get('petBirthDate'));",
									"        pm.expect(jsonData.typeId).to.eql(pm.iterationData.get('petTypeId'));",
									"            } ",
									"            else{",
									"                  // Extract variables for comparison",
									"        var { petName, petBirthDate, petTypeId } = pm.variables.toObject();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.name).to.eql(petName);",
									"        pm.expect(jsonData.birthDate).to.eql(petBirthDate);",
									"        pm.expect(jsonData.type.id).to.eql(parseInt",
									"        (petTypeId));",
									"    }",
									"        } catch (e) {",
									"            // Handle invalid JSON parsing error",
									"            pm.expect.fail(\"Response body is not valid JSON\");",
									"        }",
									"    } else {",
									"        // Handle empty response body",
									"        pm.expect.fail(\"Response body is empty\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"ownerId\", pm.iterationData.get('ownerId'));}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{petId}}\",\n  \"name\": \"{{petName}}\",\n  \"birthDate\": \"{{petBirthDate}}\",\n  \"typeId\": \"{{petTypeId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{ownerId}}"
								},
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pets to an Owner- Pet Not Found Request [BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner Not Found with Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 404);",
									"    pm.expect(jsonData).to.have.property('error', 'Not Found Error');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/pets/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{petId}}\",\n  \"name\": \"{{petName}}\",\n  \"birthDate\": \"{{petBirthDate}}\",\n  \"typeId\": \"{{petTypeId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{invalidOwnerID}}"
								},
								{
									"key": "petId",
									"value": "{{invalidPetID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pets to an Owner- Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 400);",
									"    pm.expect(jsonData).to.have.property('error', 'Bad Request');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/pets');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/owners/:ownerId/pets/:petId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"owners",
								":ownerId",
								"pets",
								":petId"
							],
							"variable": [
								{
									"key": "ownerId",
									"value": "{{invalidOwnerID}}"
								},
								{
									"key": "petId",
									"value": "{{invalidPetID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
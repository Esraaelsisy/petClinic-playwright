{
	"info": {
		"_postman_id": "49478b48-ba8c-405a-b51d-85122facbaaa",
		"name": "vetsCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38201107"
	},
	"item": [
		{
			"name": "Get Vets",
			"item": [
				{
					"name": "Get All Vets- Success Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the response is in JSON format",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate the status code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"",
									"// Check that the response is an array",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.above(0); // Ensure array is not empty",
									"});",
									"",
									"// Iterate through each veterinarian in the array and validate the structure",
									"jsonData.forEach(function(vet) {",
									"    ",
									"    // Validate that each veterinarian has an id, firstName, lastName, specialties, and nrOfSpecialties",
									"    pm.test(\"Veterinarian has required fields\", function () {",
									"        pm.expect(vet).to.have.property('id').that.is.a('number');",
									"        pm.expect(vet).to.have.property('firstName').that.is.a('string');",
									"        pm.expect(vet).to.have.property('lastName').that.is.a('string');",
									"        pm.expect(vet).to.have.property('specialties').that.is.an('array');",
									"        pm.expect(vet).to.have.property('nrOfSpecialties').that.is.a('number');",
									"    });",
									"",
									"    // Validate that the nrOfSpecialties matches the length of the specialties array",
									"    pm.test(\"nrOfSpecialties matches length of specialties array\", function () {",
									"        pm.expect(vet.specialties.length).to.eql(vet.nrOfSpecialties);",
									"    });",
									"",
									"    // If the vet has specialties, validate each specialty",
									"    if (vet.specialties.length > 0) {",
									"        vet.specialties.forEach(function(specialty) {",
									"            pm.test(\"Specialty has id and name\", function () {",
									"                pm.expect(specialty).to.have.property('id').that.is.a('number');",
									"                pm.expect(specialty).to.have.property('name').that.is.a('string');",
									"            });",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/vets"
					},
					"response": []
				},
				{
					"name": "Get All Vets By VetID - Success Request [BUG: Wrong Response]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the response is in JSON format",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate the status code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"",
									"// Check that the response is an array",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.above(0); // Ensure array is not empty",
									"});",
									"    ",
									"    // Validate that each veterinarian has an id, firstName, lastName, specialties, and nrOfSpecialties",
									"pm.test(\"Veterinarian has required fields\", function () {",
									"        pm.expect(vet).to.have.property('id').that.is.a('number');",
									"        pm.expect(vet).to.have.property('firstName').that.is.a('string');",
									"        pm.expect(vet).to.have.property('lastName').that.is.a('string');",
									"        pm.expect(vet).to.have.property('specialties').that.is.an('array');",
									"        pm.expect(vet).to.have.property('nrOfSpecialties').that.is.a('number');",
									"});",
									"",
									"    // Validate that the nrOfSpecialties matches the length of the specialties array",
									"pm.test(\"nrOfSpecialties matches length of specialties array\", function () {",
									"        pm.expect(vet.specialties.length).to.eql(vet.nrOfSpecialties);",
									"});",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.iterationData.length>0)",
									"{",
									"pm.globals.set(\"vetId\", pm.iterationData.get('vetId'));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/vets/:vetId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"vets",
								":vetId"
							],
							"variable": [
								{
									"key": "vetId",
									"value": "{{vetId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Vets By VetID - Not Found Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner Not Found with Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has Bad Request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Validate the basic structure of the error response",
									"    pm.expect(jsonData).to.have.property('status', 404);",
									"    pm.expect(jsonData).to.have.property('error', 'Not Found');",
									"    pm.expect(jsonData).to.have.property('path').to.contain('/vets/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/vets/:vetId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"vets",
								":vetId"
							],
							"variable": [
								{
									"key": "vetId",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}